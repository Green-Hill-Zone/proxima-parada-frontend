import axios from 'axios';

// URL base da API - mesma configura√ß√£o dos outros servi√ßos
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5079';

/* ===================================================================== */
/* INTERFACES - CLEAN ARCHITECTURE                                      */
/* ===================================================================== */

/**
 * Interface para confirma√ß√£o do pagamento Stripe
 * Clean Code: Interface espec√≠fica para confirma√ß√£o
 */
export interface StripePaymentConfirmation {
  sessionId: string;
  paymentIntentId?: string;
  reservationId: number;
  amount: number;
  status: 'completed' | 'failed' | 'requires_action';
  success: boolean;
  errorMessage?: string;
  customerEmail?: string;
  createdAt: string;
}

/* ===================================================================== */
/* STRIPE CONFIRMATION SERVICE - SINGLE RESPONSIBILITY                  */
/* ===================================================================== */

/**
 * Confirma o pagamento via session ID do Stripe
 * Princ√≠pio DRY: Reutiliza padr√£o de tratamento de erro
 * @param sessionId ID da sess√£o retornada pelo Stripe
 * @returns Promise com resultado da confirma√ß√£o
 */
export const confirmStripePayment = async (sessionId: string): Promise<StripePaymentConfirmation> => {
  try {
    console.log(`üîÑ Confirmando pagamento para sess√£o: ${sessionId}`);
    
    const response = await axios.post(
      `${API_BASE_URL}/api/Payment/stripe/confirm`,
      { sessionId }
    );

    console.log('‚úÖ Pagamento confirmado:', response.data);
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Erro ao confirmar pagamento:', error);
    
    if (axios.isAxiosError(error)) {
      if (error.response?.status === 400) {
        throw new Error('Session ID inv√°lido ou expirado');
      }
      if (error.response?.status === 404) {
        throw new Error('Sess√£o de pagamento n√£o encontrada');
      }
      if (error.response?.status === 409) {
        throw new Error('Pagamento j√° foi processado anteriormente');
      }
      throw new Error(`Erro do servidor: ${error.response?.status}`);
    }
    
    throw new Error('Erro de conex√£o com o servidor');
  }
};

/**
 * Verifica o status de uma sess√£o de pagamento
 * KISS: Fun√ß√£o simples para verifica√ß√£o de status
 * @param sessionId ID da sess√£o do Stripe
 * @returns Promise com status da sess√£o
 */
export const getPaymentSessionStatus = async (sessionId: string): Promise<{
  status: 'open' | 'complete' | 'expired';
  paymentStatus: 'paid' | 'unpaid' | 'no_payment_required';
}> => {
  try {
    console.log(`üîÑ Verificando status da sess√£o: ${sessionId}`);
    
    const response = await axios.get(
      `${API_BASE_URL}/api/Payment/stripe/session/${sessionId}/status`
    );

    console.log('‚úÖ Status verificado:', response.data);
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar status:', error);
    
    if (axios.isAxiosError(error)) {
      if (error.response?.status === 404) {
        throw new Error('Sess√£o n√£o encontrada');
      }
      throw new Error(`Erro do servidor: ${error.response?.status}`);
    }
    
    throw new Error('Erro de conex√£o com o servidor');
  }
};
