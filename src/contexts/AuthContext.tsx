/* ===================================================================== */
/* CONTEXTO DE AUTENTICA√á√ÉO - GERENCIAMENTO DE ESTADO DO USU√ÅRIO       */
/* ===================================================================== */
/*
 * Este arquivo implementa o sistema de autentica√ß√£o usando React Context API.
 * Ele fornece:
 * - Estado global do usu√°rio logado
 * - Fun√ß√µes de login, logout e cadastro
 * - Persist√™ncia da sess√£o no localStorage
 * - Simula√ß√£o de API com dados mock
 */

// Importa√ß√µes necess√°rias do React
import React, { createContext, useState, useEffect } from 'react';
import type { ReactNode } from 'react';

/* ===================================================================== */
/* INTERFACES E TIPOS TYPESCRIPT                                        */
/* ===================================================================== */

// Interface que define a estrutura dos dados do usu√°rio
export interface User {
  id: string;           // ID √∫nico do usu√°rio
  name: string;         // Nome completo do usu√°rio
  email: string;        // Email (usado como login)
  avatar?: string;      // URL do avatar (opcional)
}

// Interface que define a estrutura do contexto de autentica√ß√£o
export interface AuthContextType {
  user: User | null;                    // Usu√°rio atual (null se n√£o logado)
  isLoading: boolean;                   // Estado de carregamento (√∫til para spinners)
  login: (email: string, password: string) => Promise<boolean>; // Fun√ß√£o de login ass√≠ncrona
  logout: () => void;                   // Fun√ß√£o de logout
  register: (name: string, email: string, password: string) => Promise<boolean>; // Fun√ß√£o de cadastro
}

// Cria√ß√£o do contexto com valor padr√£o undefined
export const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Interface para as props do provider
interface AuthProviderProps {
  children: ReactNode;  // Componentes filhos que ter√£o acesso ao contexto
}

/* ===================================================================== */
/* DADOS SIMULADOS - BANCO DE DADOS MOCK                               */
/* ===================================================================== */

// Array de usu√°rios simulados para teste (substitui API/banco real)
const mockUsers = [
  {
    id: '1',
    name: 'Jo√£o Silva',
    email: 'joao@email.com',                    // ‚úÖ Email corrigido para teste
    password: '123456',                          // ‚úÖ Senha simples para teste
    avatar: 'https://via.placeholder.com/150/007bff/fff?text=JS'
  },
  {
    id: '2',
    name: 'Maria Santos',
    email: 'maria@email.com',                   // ‚úÖ Email corrigido para teste
    password: '123456',                          // ‚úÖ Senha simples para teste
    avatar: 'https://via.placeholder.com/150/28a745/fff?text=MS'
  },
  {
    id: '3',
    name: 'Carlos Oliveira',
    email: 'carlos@email.com',                  // ‚úÖ Email corrigido para teste
    password: '123456',                          // ‚úÖ Senha simples para teste
    avatar: 'https://via.placeholder.com/150/dc3545/fff?text=CO'
  }
];

/* ===================================================================== */
/* PROVIDER DO CONTEXTO - COMPONENTE PRINCIPAL                         */
/* ===================================================================== */

// Provider do contexto de autentica√ß√£o - envolve toda a aplica√ß√£o
export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  // Estados do React para gerenciar autentica√ß√£o
  const [user, setUser] = useState<User | null>(null);      // Usu√°rio atual
  const [isLoading, setIsLoading] = useState(true);         // Estado de carregamento

  /* ================================================================= */
  /* EFEITO DE INICIALIZA√á√ÉO - VERIFICA SESS√ÉO SALVA                 */
  /* ================================================================= */
  
  /* ================================================================= */
  /* EFEITO DE INICIALIZA√á√ÉO - VERIFICA SESS√ÉO SALVA                 */
  /* ================================================================= */
  
  // useEffect executa uma vez quando o componente monta
  // Verifica se h√° um usu√°rio logado salvo no localStorage
  useEffect(() => {
    const checkAuthStatus = () => {
      try {
        // Tenta recuperar dados do usu√°rio do localStorage
        const storedUser = localStorage.getItem('currentUser');
        if (storedUser) {
          // Se encontrou dados salvos, converte de JSON e define como usu√°rio atual
          setUser(JSON.parse(storedUser));
        }
      } catch (error) {
        // Se houver erro (dados corrompidos), limpa o localStorage
        console.error('Erro ao verificar status de autentica√ß√£o:', error);
        localStorage.removeItem('currentUser');
      } finally {
        // Sempre define isLoading como false ao final
        setIsLoading(false);
      }
    };

    // Simula um delay de carregamento (como uma chamada para API)
    // Em produ√ß√£o, aqui seria uma chamada real para verificar o token
    setTimeout(checkAuthStatus, 1000);
  }, []); // Array vazio = executa apenas uma vez ao montar o componente

  /* ================================================================= */
  /* FUN√á√ÉO DE LOGIN - AUTENTICA O USU√ÅRIO                           */
  /* ================================================================= */
  
  // Fun√ß√£o de login que simula autentica√ß√£o com backend
  const login = async (email: string, password: string): Promise<boolean> => {
    setIsLoading(true); // Ativa estado de carregamento

    try {
      // Simula delay de requisi√ß√£o para API (1.5 segundos)
      // Em produ√ß√£o, aqui seria: const response = await fetch('/api/login', {...})
      await new Promise(resolve => setTimeout(resolve, 1500));

      // Busca o usu√°rio nos dados simulados
      // Em produ√ß√£o, isso seria feito pelo servidor
      const foundUser = mockUsers.find(
        user => user.email === email && user.password === password
      );

      if (foundUser) {
        // ‚úÖ USU√ÅRIO ENCONTRADO - LOGIN BEM-SUCEDIDO
        
        // Cria objeto User sem a senha (por seguran√ßa)
        const userData: User = {
          id: foundUser.id,
          name: foundUser.name,
          email: foundUser.email,
          avatar: foundUser.avatar
        };

        // Atualiza o estado da aplica√ß√£o
        setUser(userData);
        
        // Salva no localStorage para persistir a sess√£o
        localStorage.setItem('currentUser', JSON.stringify(userData));
        
        // Log para debug (em produ√ß√£o, remover)
        console.log('‚úÖ Login realizado com sucesso:', userData);
        return true; // Retorna true indicando sucesso
        
      } else {
        // ‚ùå USU√ÅRIO N√ÉO ENCONTRADO - CREDENCIAIS INV√ÅLIDAS
        console.log('‚ùå Credenciais inv√°lidas');
        return false; // Retorna false indicando falha
      }
      
    } catch (error) {
      // ‚ö†Ô∏è ERRO INESPERADO DURANTE O LOGIN
      console.error('Erro durante o login:', error);
      return false;
    } finally {
      // Sempre desativa o loading, independente do resultado
      setIsLoading(false);
    }
  };

  /* ================================================================= */
  /* FUN√á√ÉO DE LOGOUT - REMOVE AUTENTICA√á√ÉO                          */
  /* ================================================================= */
  
  // Fun√ß√£o de logout - limpa dados do usu√°rio
  const logout = () => {
    setUser(null);                              // Remove usu√°rio do estado
    localStorage.removeItem('currentUser');     // Remove dados salvos
    console.log('üëã Logout realizado');         // Log para debug
  };

  /* ================================================================= */
  /* FUN√á√ÉO DE CADASTRO - REGISTRA NOVO USU√ÅRIO                      */
  /* ================================================================= */
  
  // Fun√ß√£o de cadastro que simula cria√ß√£o de usu√°rio
  const register = async (name: string, email: string, password: string): Promise<boolean> => {
    setIsLoading(true); // Ativa estado de carregamento

    try {
      // Simula delay de requisi√ß√£o para API
      // Em produ√ß√£o: const response = await fetch('/api/register', {...})
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Verifica se o email j√° existe nos dados simulados
      const existingUser = mockUsers.find(user => user.email === email);
      if (existingUser) {
        // ‚ùå EMAIL J√Å EXISTE - IMPEDE CADASTRO DUPLICADO
        console.log('‚ùå Email j√° cadastrado');
        return false;
      }

      // ‚úÖ EMAIL DISPON√çVEL - CRIA NOVO USU√ÅRIO
      
      // Cria objeto do novo usu√°rio
      const newUser: User = {
        id: Date.now().toString(),              // ID √∫nico baseado em timestamp
        name,                                   // Nome fornecido
        email,                                  // Email fornecido
        avatar: `https://via.placeholder.com/150/007bff/fff?text=${name.charAt(0).toUpperCase()}` // Avatar placeholder
      };

      // Adiciona aos dados simulados (em produ√ß√£o seria enviado para API)
      mockUsers.push({
        id: newUser.id,
        name: newUser.name,
        email: newUser.email,
        password,                               // Senha (em produ√ß√£o seria hash)
        avatar: newUser.avatar || ''
      });

      // Atualiza estado e salva sess√£o (auto-login ap√≥s cadastro)
      setUser(newUser);
      localStorage.setItem('currentUser', JSON.stringify(newUser));
      
      console.log('‚úÖ Cadastro realizado com sucesso:', newUser);
      return true;
      
    } catch (error) {
      // ‚ö†Ô∏è ERRO INESPERADO DURANTE O CADASTRO
      console.error('Erro durante o cadastro:', error);
      return false;
    } finally {
      // Sempre desativa o loading
      setIsLoading(false);
    }
  };

  /* ================================================================= */
  /* CONFIGURA√á√ÉO DO VALOR DO CONTEXTO                               */
  /* ================================================================= */
  
  // Objeto que ser√° fornecido pelo contexto para todos os componentes filhos
  const contextValue: AuthContextType = {
    user,        // Estado atual do usu√°rio
    isLoading,   // Estado de carregamento
    login,       // Fun√ß√£o de login
    logout,      // Fun√ß√£o de logout
    register     // Fun√ß√£o de cadastro
  };

  /* ================================================================= */
  /* RENDERIZA√á√ÉO DO PROVIDER                                         */
  /* ================================================================= */
  
  // Retorna o Provider que envolve toda a aplica√ß√£o
  // Todos os componentes filhos ter√£o acesso √†s fun√ß√µes e estado de autentica√ß√£o
  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};
