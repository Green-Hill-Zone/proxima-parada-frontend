/* ===================================================================== */
/* CHECKOUT SERVICE - CLEAN ARCHITECTURE                               */
/* ===================================================================== */
/*
 * Implementa√ß√£o seguindo os princ√≠pios:
 * - Clean Architecture: Separa√ß√£o clara de responsabilidades
 * - KISS: Interface simples alinhada com backend
 * - DRY: Reutiliza√ß√£o de configura√ß√µes
 * - YAGNI: Apenas funcionalidades necess√°rias e testadas
 * - Shadow Properties: Compat√≠vel com EF Core do backend
 */

import axios from 'axios';

// ‚úÖ Configura√ß√£o centralizada - DRY
const api = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:5079/api',
  headers: {
    'Content-Type': 'application/json; charset=utf-8',
  },
  timeout: 30000,
});

/* ===================================================================== */
/* INTERFACES - ALINHADAS COM BACKEND DTOs TESTADOS                    */
/* ===================================================================== */

// ‚úÖ Types para o frontend (UI)
export type PaymentMethod = 'card' | 'pix' | 'boleto';

export interface TravelData {
  name: string;
  date: string;
  price: number;
  people: number;
  packageId: number;
}

// ‚úÖ Request para criar sess√£o Stripe (alinhado com CreateCheckoutSessionDto)
export interface CreateStripeSessionRequest {
  packageId: number;
  customerName: string;
  customerEmail: string;
  quantity: number;
  customPrice?: number;
  packageName?: string;
  // ‚úÖ NOVO: dados para pagamento real
  amount?: number;  // em centavos (R$ 50,00 = 5000)
  includeInsurance?: boolean;
}

// ‚úÖ NOVO: Request para criar Reservation + Stripe Session em uma opera√ß√£o
export interface CreateReservationWithStripeSessionRequest {
  travelPackageId: number;
  customerEmail?: string;
  customerName?: string;
  amount?: number;
  successUrl: string;
  cancelUrl: string;
  includeInsurance?: boolean;
  specialRequests?: string;
}

// ‚úÖ Response da cria√ß√£o de sess√£o (alinhado com CheckoutSessionResponseDto)
export interface StripeSessionResponse {
  sessionId: string;
  checkoutUrl: string;
  totalAmount: number;
  packageName: string;
  quantity: number;
  reservationNumber?: string;
}

// ‚úÖ NOVO: Response para Reservation + Stripe Session
export interface ReservationWithStripeSessionResponse {
  reservationId: number;
  reservationNumber: string;
  sessionId: string;  // ‚úÖ Campo real retornado pelo backend
  checkoutUrl: string;
  totalAmount: number;  // ‚úÖ Campo real retornado pelo backend
  status: string;
  // Campos opcionais que podem n√£o vir do backend
  paymentId?: number;
  travelPackageId?: number;
  travelPackageTitle?: string;
  createdAt?: string;
}

// ‚úÖ Request para confirma√ß√£o (alinhado com ConfirmPaymentDto)
export interface ConfirmPaymentRequest {
  sessionId: string;
}

// ‚úÖ Response da confirma√ß√£o (alinhado com PaymentConfirmationDto)
export interface PaymentConfirmationResponse {
  isSuccessful: boolean;
  status: string;
  amount: number;
  paymentIntentId: string;
  reservationId?: number;
  reservationStatus?: string;
  customerEmail?: string;
  errorMessage?: string;
}

// ‚úÖ Alias para compatibilidade com c√≥digo existente
export type PaymentConfirmationResult = PaymentConfirmationResponse;

// ‚úÖ M√©todos de pagamento dispon√≠veis
export interface PaymentMethodsResponse {
  availableMethods: Array<{
    type: number;
    name: string;
    description: string;
    simulationTime: string;
  }>;
  isSimulation: boolean;
  simulationNote: string;
}

// ‚úÖ Interface legacy para compatibilidade com c√≥digo existente
export interface ReservationCheckoutData {
  reservationId: number;
  customerName: string;
  customerEmail: string;
  totalAmount: number;
  successUrl: string;
  cancelUrl: string;
}

/* ===================================================================== */
/* VALIDATION FUNCTIONS - DRY PRINCIPLE                                */
/* ===================================================================== */

/**
 * ‚úÖ CLEAN ARCH: Valida√ß√£o de usu√°rio logado para checkout
 */
export const validateUserForCheckout = (user: any): { isValid: boolean; error?: string } => {
  if (!user) {
    return { 
      isValid: false, 
      error: 'üîê Voc√™ precisa estar logado para fazer uma reserva' 
    };
  }
  
  if (!user.email) {
    return { 
      isValid: false, 
      error: 'üìß Email √© obrigat√≥rio para efetuar compra' 
    };
  }
  
  return { isValid: true };
};

/**
 * Valida dados de checkout antes de enviar para o backend
 * @param data Dados de checkout a serem validados
 * @returns Objeto com resultado da valida√ß√£o
 */
export const validateCheckoutData = (data: ReservationCheckoutData): { isValid: boolean; errors: string[] } => {
  const errors: string[] = [];

  if (!data.reservationId || data.reservationId <= 0) {
    errors.push('ID da reserva √© obrigat√≥rio');
  }

  if (!data.customerName?.trim()) {
    errors.push('Nome do cliente √© obrigat√≥rio');
  }

  if (!data.customerEmail?.trim()) {
    errors.push('Email do cliente √© obrigat√≥rio');
  } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.customerEmail)) {
    errors.push('Email inv√°lido');
  }

  if (!data.totalAmount || data.totalAmount <= 0) {
    errors.push('Valor total deve ser maior que zero');
  }

  if (!data.successUrl) {
    errors.push('URL de sucesso √© obrigat√≥ria');
  }

  if (!data.cancelUrl) {
    errors.push('URL de cancelamento √© obrigat√≥ria');
  }

  return {
    isValid: errors.length === 0,
    errors
  };
};

/**
 * ‚úÖ DRY: Cria request padronizado com dados do usu√°rio
 */
export const createCheckoutRequest = (
  travelPackageId: number,
  user: any,
  amount?: number,
  options?: {
    includeInsurance?: boolean;
    specialRequests?: string;
  }
): CreateReservationWithStripeSessionRequest => {
  // ‚úÖ VALIDA√á√ÉO: Garantir que o usu√°rio est√° logado com dados v√°lidos
  if (!user || !user.email || !user.name) {
    throw new Error('üîê Usu√°rio deve estar logado com email e nome para efetuar compra');
  }

  console.log('üìã Criando request com dados do usu√°rio logado:', {
    email: user.email,
    name: user.name,
    travelPackageId
  });

  return {
    travelPackageId,
    customerEmail: user.email,      // ‚úÖ Email exato do usu√°rio logado
    customerName: user.name,        // ‚úÖ Nome exato do usu√°rio logado  
    amount,
    successUrl: `${window.location.origin}/payment/success`,
    cancelUrl: `${window.location.origin}/payment/cancel`,
    includeInsurance: options?.includeInsurance || false,
    specialRequests: options?.specialRequests
  };
};

/* ===================================================================== */
/* CHECKOUT SERVICE CLASS - CLEAN ARCHITECTURE                         */
/* ===================================================================== */

export class CheckoutService {
  
  /**
   * ‚úÖ Obt√©m m√©todos de pagamento dispon√≠veis - INTEGRA√á√ÉO REAL
   */
  static async getPaymentMethods(): Promise<PaymentMethodsResponse> {
    try {
      console.log('ÔøΩ Buscando m√©todos de pagamento...');
      
      const response = await api.get('/paymentoption');
      
      console.log('‚úÖ M√©todos obtidos:', response.data);
      
      // Transformar dados do backend para o formato esperado pelo frontend
      const paymentMethods: PaymentMethodsResponse = {
        availableMethods: response.data.map((option: any) => ({
          type: option.id,
          name: option.name,
          description: option.description || 'M√©todo de pagamento',
          simulationTime: 'Imediato'
        })),
        isSimulation: false,
        simulationNote: ''
      };
      
      return paymentMethods;
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar m√©todos:', error);
      throw new Error('Erro ao buscar m√©todos de pagamento');
    }
  }

  /**
   * ‚úÖ Cria sess√£o Stripe - COM DADOS REAIS DO FRONTEND (KISS)
   */
  static async createStripeSession(request: CreateStripeSessionRequest): Promise<StripeSessionResponse> {
    try {
      console.log('üöÄ Criando sess√£o Stripe com dados reais:', request);
      
      // ‚úÖ USAR DADOS REAIS DO FRONTEND
      const stripeRequest = {
        // reservationId n√£o √© enviado (opcional no backend)
        amount: request.amount || request.customPrice || 5000, // ‚úÖ valor real
        packageName: request.packageName || 'Pacote de Viagem',
        packageId: request.packageId,
        customerEmail: request.customerEmail, // ‚úÖ email real
        customerName: request.customerName,   // ‚úÖ nome real
        successUrl: `${window.location.origin}/payment/success`,
        cancelUrl: `${window.location.origin}/payment/cancel`
      };
      
      const response = await api.post<StripeSessionResponse>('/api/Payment/create-stripe-session', stripeRequest);
      
      console.log('‚úÖ Sess√£o Stripe criada:', response.data);
      
      return {
        sessionId: response.data.sessionId,
        checkoutUrl: response.data.checkoutUrl,
        totalAmount: response.data.totalAmount || stripeRequest.amount,
        packageName: request.packageName || 'Pacote de Viagem',
        quantity: request.quantity,
        reservationNumber: 'TEMP-' + Date.now() // Tempor√°rio
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao criar sess√£o:', error);
      throw new Error('Erro ao criar sess√£o de checkout');
    }
  }

  /**
   * ‚úÖ NOVO: Criar Reservation + Stripe Session em uma opera√ß√£o
   * Este √© o m√©todo principal que ser√° usado no bot√£o "Pagar com Stripe"
   */
  static async createReservationWithStripeSession(
    request: CreateReservationWithStripeSessionRequest
  ): Promise<ReservationWithStripeSessionResponse> {
    console.log('üéØ Criando reserva + sess√£o Stripe:', request);

    try {
      const response = await api.post<ReservationWithStripeSessionResponse>(
        '/api/Payment/create-reservation-with-stripe',
        request
      );

      console.log('‚úÖ Reserva + Stripe criados:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Erro ao criar reserva + stripe:', error);
      
      // ‚úÖ CLEAN CODE: Tratamento espec√≠fico baseado nas regras do backend
      if (error.response?.status === 400 && error.response?.data?.Message) {
        const message = error.response.data.Message;
        
        // ‚úÖ KISS: Mensagens espec√≠ficas para cada regra de neg√≥cio
        if (message.includes('logado')) {
          throw new Error('üîê Voc√™ precisa estar logado para fazer uma reserva');
        }
        if (message.includes('Email √© obrigat√≥rio')) {
          throw new Error('üìß Email √© obrigat√≥rio para efetuar compra');
        }
        if (message.includes('Pacote de viagem n√£o encontrado')) {
          throw new Error('üì¶ Pacote de viagem n√£o encontrado');
        }
        
        // ‚úÖ DRY: Usar mensagem original do backend se n√£o for mapeada
        throw new Error(message);
      }
      
      // ‚úÖ YAGNI: Erro gen√©rico para outros casos
      throw new Error('Falha ao processar reserva e pagamento');
    }
  }

  /**
   * ‚úÖ Confirma pagamento - USANDO getPaymentStatus POR ENQUANTO
   * Nota: O backend usa sessionId para verificar status automaticamente
   */
  static async confirmPayment(
    request: ConfirmPaymentRequest, 
    userEmail?: string
  ): Promise<PaymentConfirmationResponse> {
    try {
      console.log('üîç Confirmando pagamento via status:', request);
      
      // Por enquanto, usamos o status endpoint que j√° existe
      const response = await this.getPaymentStatus(request.sessionId, userEmail);
      
      console.log('‚úÖ Pagamento confirmado:', response);
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao confirmar:', error);
      throw new Error('Erro ao confirmar pagamento');
    }
  }

  /**
   * ‚úÖ Busca status do pagamento - TESTADO E FUNCIONANDO
   */
  static async getPaymentStatus(
    sessionId: string, 
    userEmail?: string
  ): Promise<PaymentConfirmationResponse> {
    try {
      console.log('üîç Buscando status:', sessionId);
      
      const response = await api.get<PaymentConfirmationResponse>(`/api/Payment/status/${sessionId}`);
      
      console.log('‚úÖ Status obtido:', response.data);
      
      // ‚úÖ Priorizar email do usu√°rio logado sobre dados do backend
      const responseData = response.data;
      let finalCustomerEmail = userEmail || responseData.customerEmail;
      
      // ‚úÖ FALLBACK: Tentar obter email de outras fontes APENAS se n√£o tiver email do usu√°rio
      if (!finalCustomerEmail) {
        console.log('‚ö†Ô∏è Email n√£o encontrado, tentando fallbacks...');
        try {
          // Tentar obter do localStorage onde salvamos dados do pagamento
          const stripePaymentSession = localStorage.getItem('stripePaymentSession');
          if (stripePaymentSession) {
            const paymentData = JSON.parse(stripePaymentSession);
            finalCustomerEmail = paymentData.customerData?.email;
            console.log('üìß Email obtido do stripePaymentSession:', finalCustomerEmail);
          }
          
          // Tentar obter de dados de viajantes salvos
          if (!finalCustomerEmail) {
            const travelersData = localStorage.getItem('travelersData');
            if (travelersData) {
              const travelers = JSON.parse(travelersData);
              const mainTraveler = travelers.find((t: any) => t.isMainTraveler);
              finalCustomerEmail = mainTraveler?.email;
              console.log('üìß Email obtido dos viajantes:', finalCustomerEmail);
            }
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro ao obter email do localStorage:', error);
        }
      } else {
        console.log('‚úÖ Usando email fornecido/backend:', finalCustomerEmail);
      }
      
      console.log('üîç Email final determinado:', finalCustomerEmail);
      
      const result = {
        isSuccessful: responseData.isSuccessful,
        status: responseData.status,
        amount: responseData.amount,
        paymentIntentId: responseData.paymentIntentId,
        reservationId: responseData.reservationId,
        customerEmail: finalCustomerEmail,
        errorMessage: responseData.errorMessage
      };
      
      console.log('‚úÖ Resultado final do pagamento:', result);
      return result;
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar status:', error);
      throw new Error('Erro ao buscar status do pagamento');
    }
  }

  /**
   * ‚úÖ Redireciona para checkout Stripe
   */
  static redirectToStripeCheckout(checkoutUrl: string): void {
    console.log('üîÑ Redirecionando para Stripe...');
    window.location.href = checkoutUrl;
  }

  /**
   * ‚úÖ Extrai session ID da URL
   */
  static extractSessionIdFromUrl(): string | null {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('session_id');
  }

  /**
   * ‚úÖ Verifica se est√° na p√°gina de sucesso/cancelamento
   */
  static isSuccessPage(): boolean {
    return window.location.pathname.includes('/payment/success');
  }

  static isCancelPage(): boolean {
    return window.location.pathname.includes('/payment/cancel');
  }

  /**
   * ‚úÖ Cria uma sess√£o de checkout no Stripe (m√©todo legacy para compatibilidade)
   * @param data Dados necess√°rios para criar a sess√£o
   * @returns Promise com dados da sess√£o criada
   */
  static async createCheckoutSession(data: ReservationCheckoutData): Promise<StripeSessionResponse> {
    try {
      console.log('ÔøΩ Criando sess√£o Stripe (m√©todo legacy):', data);

      // Validar dados antes de enviar
      const validation = validateCheckoutData(data);
      if (!validation.isValid) {
        throw new Error(`Dados inv√°lidos: ${validation.errors.join(', ')}`);
      }

      const response = await api.post<StripeSessionResponse>('/api/Payment/create-checkout-session', data);
      
      console.log('‚úÖ Sess√£o Stripe criada:', response.data);
      return response.data;

    } catch (error: any) {
      console.error('‚ùå Erro ao criar sess√£o Stripe:', error);
      
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      }
      
      throw new Error('Erro ao criar sess√£o de pagamento');
    }
  }
}

/* ===================================================================== */
/* HELPER FUNCTIONS - DRY PRINCIPLE                                     */
/* ===================================================================== */

/**
 * ‚úÖ Formata valor em reais
 */
export const formatCurrency = (value: number): string => {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(value);
};

/**
 * ‚úÖ Extrai par√¢metros da URL de retorno do Stripe
 * DRY: Fun√ß√£o reutiliz√°vel para parsing de par√¢metros
 */
export const extractStripeParams = (url: string = window.location.search) => {
  const params = new URLSearchParams(url);
  const sessionId = params.get('session_id');
  
  return {
    sessionId,
    success: !!sessionId, // Se tem session_id, foi sucesso
    canceled: params.get('canceled') === 'true' || !sessionId
  };
};

/**
 * ‚úÖ Gera dados de exemplo para testes - TESTADOS
 */
export const createMockCheckoutRequest = (packageId: number = 1): CreateStripeSessionRequest => ({
  packageId,
  customerName: 'Jo√£o Silva',
  customerEmail: 'joao.silva@teste.com',
  quantity: 2,
  customPrice: 1500.00,
  packageName: 'Pacote Teste Frontend'
});

export default CheckoutService;
