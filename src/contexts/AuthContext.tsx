/* ===================================================================== */
/* CONTEXTO DE AUTENTICA√á√ÉO - GERENCIAMENTO DE ESTADO DO USU√ÅRIO       */
/* ===================================================================== */
/*
 * Este arquivo implementa o sistema de autentica√ß√£o usando React Context API.
 * Ele fornece:
 * - Estado global do usu√°rio logado
 * - Fun√ß√µes de login, logout e cadastro
 * - Persist√™ncia da sess√£o no localStorage
 * - Simula√ß√£o de API com dados mock
 */

// Importa√ß√µes necess√°rias do React
import type { ReactNode } from 'react';
import React, { useEffect, useState } from 'react';

// Importa√ß√µes dos tipos e dados separados
import { AuthContext } from './authContext';
import { mockTravelPackages } from './mockData';
import type { AuthContextType, TravelPackage, User } from './types';

// Importa√ß√£o do servi√ßo real de usu√°rios
import { createUser, loginUser, adaptUserToAuthUser, type CreateUserRequest } from '../services/UserService';

// Interface para as props do provider
interface AuthProviderProps {
  children: ReactNode;  // Componentes filhos que ter√£o acesso ao contexto
}

/* ===================================================================== */
/* PROVIDER DO CONTEXTO - COMPONENTE PRINCIPAL                         */
/* ===================================================================== */

// Provider do contexto de autentica√ß√£o - envolve toda a aplica√ß√£o
export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  // Estados do React para gerenciar autentica√ß√£o
  const [user, setUser] = useState<User | null>(null);      // Usu√°rio atual
  const [isLoading, setIsLoading] = useState(true);         // Estado de carregamento

  /* ================================================================= */
  /* EFEITO DE INICIALIZA√á√ÉO - VERIFICA SESS√ÉO SALVA                 */
  /* ================================================================= */

  /* ================================================================= */
  /* EFEITO DE INICIALIZA√á√ÉO - VERIFICA SESS√ÉO SALVA                 */
  /* ================================================================= */

  // useEffect executa uma vez quando o componente monta
  // Verifica se h√° um usu√°rio logado salvo no localStorage
  useEffect(() => {
    const checkAuthStatus = () => {
      try {
        // Tenta recuperar dados do usu√°rio do localStorage
        const storedUser = localStorage.getItem('currentUser');
        if (storedUser) {
          // Se encontrou dados salvos, converte de JSON e define como usu√°rio atual
          setUser(JSON.parse(storedUser));
        }
      } catch (error) {
        // Se houver erro (dados corrompidos), limpa o localStorage
        console.error('Erro ao verificar status de autentica√ß√£o:', error);
        localStorage.removeItem('currentUser');
      } finally {
        // Sempre define isLoading como false ao final
        setIsLoading(false);
      }
    };

    // Simula um delay de carregamento (como uma chamada para API)
    // Em produ√ß√£o, aqui seria uma chamada real para verificar o token
    setTimeout(checkAuthStatus, 1000);
  }, []); // Array vazio = executa apenas uma vez ao montar o componente

  /* ================================================================= */
  /* FUN√á√ÉO DE LOGIN - AUTENTICA O USU√ÅRIO                           */
  /* ================================================================= */

  // Fun√ß√£o de login que autentica com backend real
  const login = async (email: string, password: string): Promise<boolean> => {
    setIsLoading(true); // Ativa estado de carregamento

    try {
      console.log('üîÑ Realizando login com backend...', { email });
      
      // Chama o servi√ßo real de login
      const userData = await loginUser({ email, password });

      if (userData) {
        // ‚úÖ LOGIN BEM-SUCEDIDO
        console.log('‚úÖ Login realizado com sucesso:', userData);
        
        // Verifica se h√° dados salvos do usu√°rio para preservar informa√ß√µes extras
        const savedUserData = localStorage.getItem('currentUser');
        let existingData: User | null = null;
        
        if (savedUserData) {
          try {
            existingData = JSON.parse(savedUserData);
          } catch (error) {
            console.log('Dados salvos inv√°lidos, usando dados padr√£o');
          }
        }
        
        // Adapta dados do backend preservando informa√ß√µes locais
        const authUserData = adaptUserToAuthUser(userData, existingData || undefined);
        
        // Atualiza o estado da aplica√ß√£o
        setUser(authUserData);

        // Salva no localStorage para persistir a sess√£o
        localStorage.setItem('currentUser', JSON.stringify(authUserData));

        return true; // Retorna true indicando sucesso

      } else {
        // ‚ùå CREDENCIAIS INV√ÅLIDAS
        console.log('‚ùå Credenciais inv√°lidas ou usu√°rio n√£o encontrado');
        return false; // Retorna false indicando falha
      }

    } catch (error) {
      // ‚ö†Ô∏è ERRO INESPERADO DURANTE O LOGIN
      console.error('Erro durante o login:', error);
      return false;
    } finally {
      // Sempre desativa o loading, independente do resultado
      setIsLoading(false);
    }
  };

  /* ================================================================= */
  /* FUN√á√ÉO DE LOGOUT - REMOVE AUTENTICA√á√ÉO                          */
  /* ================================================================= */

  // Fun√ß√£o de logout - limpa dados do usu√°rio
  const logout = () => {
    setUser(null);                              // Remove usu√°rio do estado
    localStorage.removeItem('currentUser');     // Remove dados salvos
    console.log('üëã Logout realizado');         // Log para debug
  };

  /* ================================================================= */
  /* FUN√á√ÉO DE CADASTRO - REGISTRA NOVO USU√ÅRIO                      */
  /* ================================================================= */

  // Fun√ß√£o de cadastro que cria usu√°rio no backend real
  const register = async (name: string, email: string, password: string): Promise<boolean> => {
    setIsLoading(true); // Ativa estado de carregamento

    try {
      console.log('üîÑ Criando usu√°rio no backend...', { name, email });
      
      // Prepara dados para envio ao backend
      const createUserData: CreateUserRequest = {
        name,
        email,
        password,
        role: 'customer', // Role padr√£o para novos usu√°rios
      };

      // Chama o servi√ßo real de cria√ß√£o de usu√°rio
      const newUser = await createUser(createUserData);

      // ‚úÖ USU√ÅRIO CRIADO COM SUCESSO
      console.log('‚úÖ Cadastro realizado com sucesso:', newUser);

      // Adapta dados do backend para o formato do contexto de autentica√ß√£o (sem dados anteriores no registro)
      const authUserData = adaptUserToAuthUser(newUser, undefined);

      // Atualiza estado e salva sess√£o (auto-login ap√≥s cadastro)
      setUser(authUserData);
      localStorage.setItem('currentUser', JSON.stringify(authUserData));

      return true;

    } catch (error) {
      // ‚ö†Ô∏è ERRO DURANTE O CADASTRO
      console.error('Erro durante o cadastro:', error);
      
      // Mostra mensagens de erro mais espec√≠ficas se poss√≠vel
      if (error instanceof Error) {
        console.error('Detalhes do erro:', error.message);
      }
      
      return false;
    } finally {
      // Sempre desativa o loading
      setIsLoading(false);
    }
  };

  /* ================================================================= */
  /* FUN√á√ÉO PARA BUSCAR VIAGENS DO USU√ÅRIO                           */
  /* ================================================================= */

  // Fun√ß√£o para buscar as viagens de um usu√°rio espec√≠fico
  const getUserTravels = (userId: string): TravelPackage[] => {
    return mockTravelPackages[userId] || [];
  };

  /* ================================================================= */
  /* FUN√á√ÉO PARA ATUALIZAR DADOS DO USU√ÅRIO NO CONTEXTO              */
  /* ================================================================= */

  // Fun√ß√£o para atualizar os dados do usu√°rio no contexto ap√≥s edi√ß√£o
  const updateUser = (updatedUser: User): void => {
    console.log('üîÑ Atualizando usu√°rio no contexto:', updatedUser);
    
    // Atualiza o estado do usu√°rio
    setUser(updatedUser);
    
    // Atualiza tamb√©m no localStorage para persistir
    localStorage.setItem('currentUser', JSON.stringify(updatedUser));
    
    console.log('‚úÖ Usu√°rio atualizado no contexto com sucesso');
  };

  /* ================================================================= */
  /* CONFIGURA√á√ÉO DO VALOR DO CONTEXTO                               */
  /* ================================================================= */

  // Objeto que ser√° fornecido pelo contexto para todos os componentes filhos
  const contextValue: AuthContextType = {
    user,           // Estado atual do usu√°rio
    isLoading,      // Estado de carregamento
    login,          // Fun√ß√£o de login
    logout,         // Fun√ß√£o de logout
    register,       // Fun√ß√£o de cadastro
    updateUser,     // Fun√ß√£o para atualizar usu√°rio no contexto
    getUserTravels  // Fun√ß√£o para buscar viagens
  };

  /* ================================================================= */
  /* RENDERIZA√á√ÉO DO PROVIDER                                         */
  /* ================================================================= */

  // Retorna o Provider que envolve toda a aplica√ß√£o
  // Todos os componentes filhos ter√£o acesso √†s fun√ß√µes e estado de autentica√ß√£o
  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthProvider;